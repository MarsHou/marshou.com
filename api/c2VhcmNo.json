[{"title":"使用HEXO搭建个人网站","date":"2019-08-20T07:33:13.000Z","updated":"2019-08-20T11:35:11.776Z","content":"工作步骤\nMacOS电脑\n\n安装Hexo之前，安装好 Node.js , Git\n\n使用 npm install -g hexo-cli 安装hexo程序\n\n初始化BLOG\n\n本地运行调试\n\n部署\n\n\n开始准备工作安装Node.js安装 Node.js 的最佳方式是使用 nvm。nvm 的开发者提供了一个自动安装 nvm 的简单脚本：\ncURL:\n1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh\nWget:\n1wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | sh\n安装完成后，重启终端并执行下列命令即可安装 Node.js。\n1nvm install stable\n或者您也可以下载 安装程序 来安装。\n安装Git如果你的电脑安装了Xcode，即已安装好git，如果没有，可以使用以下命令安装Git\n1brew install git\n检测是否安装了Git\n123456$ gitusage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]           &lt;command&gt; [&lt;args&gt;]\n安装Hexo1npm install -g hexo-cli\n安装完成后，输入命令 hexo 以检测是否安装成功。\n123456789$ hexoUsage: hexo &lt;command&gt;Commands:  help     Get help on a command.  init     Create a new Hexo folder.  version  Display version information.Global Options:  --config  Specify config file instead of using _config.yml  --cwd     Specify the CWD  --debug   Display all verbose messages in the terminal  --draft   Display draft posts  --safe    Disable all plugins and scripts  --silent  Hide output on consoleFor more help, you can use 'hexo help [command]' for the detailed informationor you can check the docs: http://hexo.io/docs/\n以上是安装成功的输出。\n搭建BLOG创建BLOG首先初始化一个BLOG框架结构\n12345678$ hexo init blogINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitCloning into '/Users/Mars/blog'.........found 1 low severity vulnerability  run `npm audit fix` to fix them, or `npm audit` for detailsINFO  Start blogging with Hexo!\n然后命令进入blog文件夹开启本地调试服务。\n1234$ cd blog$ hexo serverINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.\n用浏览器打开 http://localhost:4000 查看BLOG的展示效果。\n部署BLOG拥有GitHub账号打开 GitHub官网 注册账号\n\n设置密码\n\n选择免费即可，下面的订阅可以去除☑️\n\n第三步可直接跳过\n\n账号创建成功，需要验证邮箱\n\n查看邮件，点击Verify email address\n\n创建 GitHub Pages 仓库点击Verify email address 后会自动打开创建仓库的页面，填入username.github.io, username 要对应上你的GitHub用户名，选择Public （微软收购后，GitHub pages不支持private），点击 Create repository 按钮。\n\n创建成功按下图所示点击1处切换SSH，点击2处copy内容\n\n配置BLOG安装 hexo-deployer-git。\n1npm install hexo-deployer-git --save\n打开blog目录下的_config.yml文件，下图所用IDE为 VSCode，把上面copy的内容粘贴到repo的值处\n\n123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:UserName/username.github.io.git  branch: master\n配置本地Git信息以及添加SSH keys1、设置全局本地用户信息\n12git config --global user.name 'username'git config --global user.email 'username@gmail.com'\n2、生成SSH keys\n123456789101112131415161718192021$ ssh-keygen -t rsa -b 4096 -C \"username@gmail.com\"Generating public/private rsa key pair.Enter file in which to save the key (/Users/username/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /Users/username/.ssh/id_rsa.Your public key has been saved in /Users/username/.ssh/id_rsa.pub.The key fingerprint is:SHA256:0UP0s5TabjLIH8uGANrwx3OQkrOO7dD1KRU2xoLePjE username@gmail.comThe key's randomart image is:+---[RSA 4096]----+|         .o      ||     . . o . .   ||    ....B o =    ||  ..=.o+ + = o   ||   =.*E.S . o    ||  ..+o=*.o .     ||  .+..++=.+ o    ||  ..o  o.o.*     ||   ..    .+      |+----[SHA256]-----+\n蓝色框中的三行\n\n第一行按回车确认路径\n第二行输入密码（可回车不设置密码）\n第三行确认密码（如未设置密码也回车）\n\n\n3、GitHub add SSH keys\n12$ cat ~/.ssh/id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8dLDsmqRT183PpehwUxtlwfuEJkGlHCp5poFY4mbr7+Amoa3MOjTM6L5APZsvOk2qkOImxwt222P5nT4t/cHE4NVx4XuwcT8Zjef+o+tSBSlx884RfX8nk23SK4KK/Em2FZhdPphSGygCEcNEsw6zMJhIOYz/8m75UrpIKNyvYFh96vrj9pVCN8sT1rGdbVo6pI+bVmyDrCxJfs/9bPHaNPBrHbVBS username@guanaitong.com\n拷贝内容进入 添加SSH keys 页面粘贴到Key的内容框，title随意填。点击Add SSH key按钮\n\n部署BLOG到GitHub Pages使用命令hexo d -g\n12345678910111213141516171819202122$ hexo d -gINFO  Start processingINFO  Files loaded in 104 msINFO  0 files generated in 151 msINFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...On branch masternothing to commit, working tree cleanWarning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.Enumerating objects: 48, done.Counting objects: 100% (48/48), done.Delta compression using up to 4 threadsCompressing objects: 100% (38/38), done.Writing objects: 100% (48/48), 507.41 KiB | 1.87 MiB/s, done.Total 48 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), done.To github.com:username/username.github.io.git * [new branch]      HEAD -&gt; masterBranch 'master' set up to track remote branch 'master' from 'git@github.com:username/username.github.io.git'.INFO  Deploy done: git\n部署完成后浏览器打开BLOG地址 username.github.io 查看部署效果\n\n常用HEXO 命令1234567891011121314151617181920212223# 初始化blog$ hexo init blog# 创建新文章$ hexo new \"文章标题\"# 安装插件模块$ npm install# 清除缓存$ hexo clean# 生成blog静态文件$ hexo generate# 开启本地服务$ hexo server# 部署$ hexo deploy# 部署+生成blog静态文件$ hexo d -g\n以上为搭建全部流程，如有未懂之处，可留言。Enjoy!\n","plink":"http://marshou.github.io/post/use-hexo-build-personal-website/"},{"title":"被Jenkins坑过的日子","date":"2019-07-12T02:57:25.000Z","updated":"2019-08-20T05:53:20.781Z","content":"前言环境MacOS\n场景使用Python 抓取一个JS 动态渲染的页面，使用到了Scrapy、Scrapy-Splash 框架，运用了Doker 容器。\n坑来了No1 、Jenkins 里直接写Scrapy、Pip 等命令出现Command not found 错误案件分析：先看看Jenkins 的环境变量，进入Jenkins 首页 -&gt; Mange Jenkins -&gt; System Information, 找到Environment Variables （环境变量）表格，在表格里找到PATH的值，默认是/usr/bin:/bin:/usr/sbin:/sbin, 再看看你的pip、scrapy 安装在哪的？\n12345$ which pip/usr/local/bin/pip$ which scrapy/usr/local/bin/scrapy\nSo. Why command not found? Because may be it.\n解决办法：就是给Jenkins 修改环境变量，我尝试到的办法是在Configura System -&gt; Global properties 里勾上Environment variables 增加键值对Name 填写PATH， Value 填写/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin， （没有尝试只填写/usr/local/bin会怎样，有钻研精神的同学可以试试）。\nNo2、 在构建的脚本里执行引入了第三方框架的Python 文件，出现ImportError: No module named ** 错误案件分析： 我这个爬虫的执行文件里内容如下\nmain.py\n12345678#!/usr/bin python# -*- coding: utf-8 -*-# @Time    : 2018/11/29 15:58# @Author  : Marsfrom scrapy import cmdlinecmdline.execute(['scrapy', 'crawl', '此处为爬虫入口程序名'])\n在Terminal 执行main.py``` 完全没问题，但部署到Jenkins 上就出现了如下错误123456789101112```shell $ /bin/sh -xe /Users/Shared/Jenkins/tmp/jenkins4266129241674795365.sh+ python main.pyTraceback (most recent call last):  File \"main.py\", line 20, in &lt;module&gt;    from scrapy import cmdline  File \"/Library/Python/2.7/site-packages/scrapy/__init__.py\", line 27, in &lt;module&gt;    from . import _monkeypatches  File \"/Library/Python/2.7/site-packages/scrapy/_monkeypatches.py\", line 20, in &lt;module&gt;    import twisted.persisted.styles  # NOQAImportError: No module named twisted.persisted.styles\n别怀疑你的twisted包是不是有问题，网上找了2、3天没找到同款条件下的同款问题，更没有同款答案了。我尝试了\n\n升级Jenkins\n卸载重装twisted\n增加PYTHONPATH\n增加PATH\n…\n\n都没解决，最终我直接把程序放在桌面上，通过在Jenkins 里写一段\n1cd /Users/Mars/Documents\n构建Jenkins 的时候又报错了\n123$ /bin/sh -xe /Users/Shared/Jenkins/tmp/jenkins3643154797228771836.sh+ cd /Users/Mars/Documents/Users/Shared/Jenkins/tmp/jenkins3643154797228771836.sh: line 2: cd: /Users/gatscm2/Documents: Permission denied\nPermission denied 没权限，这时候我恍然大明白， 马上在Jenkins 的shell 脚本里敲下两个英文字母id 再构建一下。\n123$ /bin/sh -xe /Users/Shared/Jenkins/tmp/jenkins4686859629267551489.sh+ iduid=267(jenkins) gid=267(jenkins) egid=1(daemon) groups=267(jenkins),12(everyone),20(staff),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(com.apple.sharepoint.group.2),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),101(com.apple.access_screensharing-disabled),102(com.apple.access_ssh-disabled)\n这下终于通了，原来Jenkins 系统里的所有操作都是以电脑用户Jenkins 的身份操作的，所以为什么会各种找不到module的情况出现。找到问题源头了，接下来解决问题。\n解决办法： 更改Jenkins 系统执行时的身份\n123456789101112#停止Jenkins$ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist# 修改group 和user$ sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/Mars’ +wq org.jenkins-ci.plist# 修改之前文件的归属权限$ sudo chown -R Mars:staff /Users/Shared/Jenkins/$ sudo chown -R Mars:staff /var/log/jenkins# 开始Jenkins$ sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n第二步也可以直接打开文件修改，\n找到key 标签为GroupName 对应的string 标签，把daemon 用staff  替换掉\n找到key 标签为UserName 对应的string 标签，把daemon 用你电脑平常使用的用user name 替换掉\n验证是否修改成功，再用id 命令试试\n123$ /bin/sh -xe /Users/Shared/Jenkins/tmp/jenkins1779228406794725443.sh+ iduid=502(Mars) gid=20(staff) groups=20(staff),702(com.apple.sharepoint.group.2),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),101(com.apple.access_screensharing-disabled),102(com.apple.access_ssh-disabled)\n好了，问题解决了。此处建议把Jenkins 的用户群组和用户名称改成电脑平时使用的账号，可以避免很多未知的坑\nNo3、 Jenkins 使用GIT 插件后使用clone 代码，SSH Key问题案件分析： 在Jenkins 里使用git 出现权限问题，你可能记得你明明已经配好了SSH Key 的公钥，而且在本地shell 命令使用git clone ** 也没问题，为什么Jenkins 里就不行了。\n解决办法： 用电脑本机的.ssh 文件替换掉Jenkins 目录下的.ssh 文件，  没错！又是因为Jenkins 有自己的一套私钥、公钥。\nEnding这是第一次正正经经的写经验输出，有更好的解决思路、办法，欢迎留言抨击，共同成长。\n再说说写的过程中，怎么碰到的问题，怎么去分析，怎么去解决。特别是怎么去分析可能在解决问题之后会觉得解决的思路很傻，但是在没有外力帮助的情况下，自己是怎么去解决的，记录下来后。\n转过身来看，嗯！这就是成长！\n","plink":"http://marshou.github.io/post/Fix-Jenkins-bug-life/"},{"title":"Upgrade node on mac","date":"2018-07-18T01:52:09.000Z","updated":"2019-08-20T05:53:16.694Z","content":"STEP 1123$ sudo npm cache clean -fPassword:npm WARN using --force I sure hope you know what you are doing.\nSTEP 21234$ sudo npm install -g n/usr/local/bin/n -&gt; /usr/local/lib/node_modules/n/bin/n/usr/local/lib└── n@2.1.12\nSTEP 31234567$ sudo n stable     install : node-v10.6.0       mkdir : /usr/local/n/versions/node/10.6.0       fetch : https://nodejs.org/dist/v10.6.0/node-v10.6.0-darwin-x64.tar.gz######################################################################## 100.0%   installed : v10.6.0\nSTEP 412$ node -vv10.6.0\n","plink":"http://marshou.github.io/post/upgrade-node-on-mac/"},{"title":"How remote linux of ssh","date":"2018-07-17T03:26:56.000Z","updated":"2019-08-20T05:53:18.772Z","content":"Use terminal remote linux server. Just need a Command!!! ssh username@ip -pport\n1ssh root@192.163.1.1 -p8989\nThen input your password of remote server\n123$ ssh root@192.163.1.1 -p8989root@192.163.1.1's password:[root@host ~]#\nIf need modify your root password. Can try the  passwd  command.\n","plink":"http://marshou.github.io/post/how-remote-linux-of-ssh/"},{"title":"Install Shadowsocks on CentOS","date":"2018-07-16T09:24:50.000Z","updated":"2019-08-20T05:53:14.407Z","content":"STEPSTEP 11wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nIf prompt error bash: wget: command not found.  First execute yum -y install wget.\nSTEP 21chmod +x shadowsocks-all.sh\nSTEP 31./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log\nSTEP 4Setting password and port.\nSTEP 5Select 7(aes-256-cfb). Because only use cfb on wingy.\nSTEP 6Press any key to start…or Press Ctrl+C to cancel\nEXAMPLESTEP1123[root@host ~]# wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh-bash: wget: command not found\n1[root@host ~]# yum -y install wget\n12[root@host ~]# wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nSTEP21chmod +x shadowsocks-all.sh\nSTEP31./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log\nSTEP41234567891011121314Failed to set locale, defaulting to CLoaded plugins: fastestmirrorSetting up Install ProcessDetermining fastest mirrors * base: centos.mirror.ndchost.com * elrepo-kernel: repos.lax-noc.comWhich Shadowsocks server you'd select:1) Shadowsocks-Python2) ShadowsocksR3) Shadowsocks-Go4) Shadowsocks-libevPlease enter a number (Default Shadowsocks-Python):You choose = Shadowsocks-Python\n1234Please enter password for Shadowsocks-Python(Default password: teddysun.com):teddysun.compassword = teddysun.com\n1234Please enter a port for Shadowsocks-Python [1-65535](Default port: 17945):17945port = 17945\nSTEP512345678910111213141516171819202122Please select stream cipher for Shadowsocks-Python:1) aes-256-gcm2) aes-192-gcm3) aes-128-gcm4) aes-256-ctr5) aes-192-ctr6) aes-128-ctr7) aes-256-cfb8) aes-192-cfb9) aes-128-cfb10) camellia-128-cfb11) camellia-192-cfb12) camellia-256-cfb13) xchacha20-ietf-poly130514) chacha20-ietf-poly130515) chacha20-ietf16) chacha2017) salsa2018) rc4-md5Which cipher you'd select(Default: aes-256-gcm):7cipher = aes-256-cfb\nSTEP612345678910111213141516171819202122Press any key to start...or Press Ctrl+C to cancel[Info] Checking the EPEL repository...... ...... ...... ...INFO: loading config from /etc/shadowsocks-python/config.json2018-07-16 00:05:22 INFO     loading libcrypto from libcrypto.so.10Starting Shadowsocks successCongratulations, Shadowsocks-Python server install completed!Your Server IP        :  95.169.1.110Your Server Port      :  17945Your Password         :  teddysun.comYour Encryption Method:  aes-256-cfbYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients) ss://YWVzLTI1Ni1jZmI6TWFyczUyMDEzMUA5NS4xNjkuMS5xMTc7ODk4OQ==Your QR Code has been saved as a PNG file path: /root/shadowsocks_python_qr.pngWelcome to visit: https://teddysun.com/486.htmlEnjoy it!\n","plink":"http://marshou.github.io/post/centos-install-ssh/"},{"title":"Preface","date":"2017-10-11T07:46:28.000Z","updated":"2019-08-20T05:53:10.846Z","content":"Eventually, I choiced write blog. I am born the 90s of Chinese family, Poor learning, very lazy, liked cool. Sorry, My English is very poor, I still use English write blog, So what? I hope to improve my English, professional skills and help everyone, by wirting blogs. This’s my original intention of wirting blog. Ok, Gone… See you soon.\n","plink":"http://marshou.github.io/post/Preface/"}]